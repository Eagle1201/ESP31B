
name=ESP31B Modules
version=0.0.1

runtime.tools.xtensa-esp108-elf-gcc.path={runtime.platform.path}/tools/xtensa-esp108-elf
runtime.tools.esptool.path={runtime.platform.path}/esptool.py

compiler.warning_flags=-w
compiler.warning_flags.none=-w
compiler.warning_flags.default=
compiler.warning_flags.more=-Wall
compiler.warning_flags.all=-Wall -Wextra

compiler.path={runtime.tools.xtensa-esp108-elf-gcc.path}/bin/
compiler.sdk.path={runtime.platform.path}/tools/sdk
compiler.cpreprocessor.flags=-D__ets__ -DICACHE_FLASH -U__STRICT_ANSI__ "-I{compiler.sdk.path}/include"

compiler.c.cmd=xtensa-esp108-elf-gcc
compiler.c.flags=-c {compiler.warning_flags} -Os -g -Wpointer-arith -Wno-implicit-function-declaration -Wl,-EL -fno-inline-functions -nostdlib -mlongcalls -mtext-section-literals -falign-functions=4 -MMD -std=gnu99 -ffunction-sections -fdata-sections

compiler.cpp.cmd=xtensa-esp108-elf-g++
compiler.cpp.flags=-c {compiler.warning_flags} -Os -g -mlongcalls -mtext-section-literals -fno-exceptions -fno-rtti -falign-functions=4 -std=c++11 -MMD -ffunction-sections -fdata-sections

compiler.S.cmd=xtensa-esp108-elf-gcc
compiler.S.flags=-c -g -x assembler-with-cpp -MMD -mlongcalls

compiler.c.elf.cmd=xtensa-esp108-elf-gcc
compiler.c.elf.flags="-L{compiler.sdk.path}/lib" -nostdlib "-T{compiler.sdk.path}/ld/{build.flash_ld}" -Wl,--no-check-sections -u call_user_start -Wl,-static
compiler.c.elf.libs=-lc -lgcc -lhal -lm -lfreertos -lmain -lnet80211 -lphy -lpp -lrtc -lwpa -lwpa2 -lwps -lsmartconfig -lupgrade -lcrypto {build.src_libs}

compiler.as.cmd=xtensa-esp108-elf-as

compiler.ar.cmd=xtensa-esp108-elf-ar
compiler.ar.flags=cru

compiler.elf2hex.cmd=esptool.py
compiler.elf2hex.flags=

compiler.size.cmd=xtensa-esp108-elf-size

compiler.python.cmd=python
compiler.python.cmd.windows=python.exe

# This can be overriden in boards.txt
build.extra_flags=-DESP31B -DSPIFFS_START_ADDRESS={build.spiffs_start} -DSPIFFS_END_ADDRESS={build.spiffs_end} -DSPIFFS_BLOCK_SIZE={build.spiffs_blocksize} -DSPIFFS_PAGE_SIZE={build.spiffs_pagesize}

# These can be overridden in platform.local.txt
compiler.c.extra_flags=
compiler.c.elf.extra_flags=
compiler.S.extra_flags=
compiler.cpp.extra_flags=
compiler.ar.extra_flags=
compiler.objcopy.eep.extra_flags=
compiler.elf2hex.extra_flags=

## Compile c files
recipe.c.o.pattern="{compiler.path}{compiler.c.cmd}" {compiler.cpreprocessor.flags} {compiler.c.flags} {build.src_flags} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.c.extra_flags} {build.extra_flags} {includes} "{source_file}" -o "{object_file}"

## Compile c++ files
recipe.cpp.o.pattern="{compiler.path}{compiler.cpp.cmd}" {compiler.cpreprocessor.flags} {compiler.cpp.flags} {build.src_flags} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.cpp.extra_flags} {build.extra_flags} {includes} "{source_file}" -o "{object_file}"

## Compile S files
recipe.S.o.pattern="{compiler.path}{compiler.c.cmd}" {compiler.cpreprocessor.flags} {compiler.S.flags} {build.src_flags} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.c.extra_flags} {build.extra_flags} {includes} "{source_file}" -o "{object_file}"

## Create archives
recipe.ar.pattern="{compiler.path}{compiler.ar.cmd}" {compiler.ar.flags} {compiler.ar.extra_flags} "{build.path}/arduino.ar" "{object_file}"

## Combine gc-sections, archives, and objects
recipe.c.combine.pattern="{compiler.path}{compiler.c.elf.cmd}" {compiler.c.elf.flags} {compiler.c.elf.extra_flags} -Wl,--start-group {object_files} "{build.path}/arduino.ar" {compiler.c.elf.libs} -Wl,--end-group -o "{build.path}/{build.project_name}.elf"

## Create eeprom
recipe.objcopy.eep.pattern=

## Create hex
recipe.objcopy.hex.pattern="{compiler.python.cmd}" "{runtime.platform.path}/tools/gen_appbin.py" "{build.path}/{build.project_name}.elf" "{compiler.sdk.path}/ld/{build.flash_ld}" "{build.path}" "{compiler.path}" "0" "0"

## Save hex
recipe.output.tmp_file={build.project_name}.bin
recipe.output.save_file={build.project_name}.{build.variant}.bin

## Compute size
recipe.size.pattern="{compiler.path}{compiler.size.cmd}" -A "{build.path}/{build.project_name}.elf"
recipe.size.regex=^(?:\.irom0\.text|\.text|\.data|\.rodata|)\s+([0-9]+).*
recipe.size.regex.data=^(?:\.data|\.rodata|\.bss)\s+([0-9]+).*

# ------------------------------

tools.esptool.cmd=python
tools.esptool.cmd.windows=python.exe
tools.esptool.path={runtime.platform.path}/tools/esptool.py
tools.esptool.network_cmd=python
tools.esptool.network_cmd.windows=python.exe

tools.esptool.upload.protocol=esp32
tools.esptool.upload.params.verbose=
tools.esptool.upload.params.quiet=
tools.esptool.upload.pattern="{cmd}" "{path}" -b {upload.speed} -p "{serial.port}" write_flash -ff {build.flash_freq} -fm {build.flash_mode} -fs {build.flash_size} 0x0 "{runtime.platform.path}/tools/sdk/bin/boot.bin" 0x04000 {build.flash_bin} {build.blank_bin} "{runtime.platform.path}/tools/sdk/bin/blank.bin"
tools.esptool.upload.network_pattern="{network_cmd}" "{runtime.platform.path}/tools/espota.py" -i "{serial.port}" -p "{network.port}" "--auth={network.password}" -f "{build.path}/{build.project_name}.elf.ota.bin"

tools.mkspiffs.cmd=mkspiffs
tools.mkspiffs.cmd.windows=mkspiffs.exe
tools.mkspiffs.path={runtime.platform.path}/tools/mkspiffs
